# Generated by Django 4.2.18 on 2025-04-07 14:18

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Database_manage",
            fields=[
                ("database_id", models.AutoField(primary_key=True, serialize=False)),
                ("database_name", models.CharField(max_length=20)),
                ("database_grouping", models.CharField(max_length=20)),
                ("database_instances", models.CharField(max_length=20)),
                ("database_features", models.CharField(max_length=20)),
                ("create_time", models.DateTimeField(auto_now_add=True)),
            ],
            options={"db_table": "database_info", },
        ),
        migrations.CreateModel(
            name="database_manage2",
            fields=[
                ("Database_id", models.AutoField(primary_key=True, serialize=False)),
                ("Database_name", models.CharField(max_length=20)),
                ("Database_number", models.CharField(max_length=20)),
                ("Database_type", models.CharField(max_length=200)),
                ("create_time", models.DateTimeField(auto_now_add=True)),
            ],
            options={"db_table": "database_manage2", },
        ),
        migrations.CreateModel(
            name="DatasetManagement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="数据集名称"),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("PCAP", "原始网络流量"),
                            ("GRAY", "灰度图格式"),
                            ("RGB", "RGB图格式"),
                            ("OTHER", "其他"),
                        ],
                        default="OTHER",
                        max_length=10,
                        verbose_name="数据集类别",
                    ),
                ),
                (
                    "upload_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="上传时间"
                    ),
                ),
                (
                    "data_file",
                    models.FileField(upload_to="datasets/", verbose_name="数据文件"),
                ),
                ("size", models.PositiveIntegerField(verbose_name="数据量(条)")),
            ],
            options={
                "verbose_name": "数据集管理",
                "verbose_name_plural": "数据集管理",
                "ordering": ["-upload_time"],
            },
        ),
        migrations.CreateModel(
            name="Early_warning_database",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("tool_name", models.CharField(max_length=40)),
                ("testcase_name", models.CharField(max_length=40)),
                ("indicator_a", models.CharField(max_length=40)),
                ("indicator_p", models.CharField(max_length=40)),
                ("indicator_r", models.CharField(max_length=40)),
                ("indicator_f", models.CharField(max_length=40)),
                ("statu", models.CharField(max_length=40)),
            ],
            options={"db_table": "Early_warning_database", },
        ),
        migrations.CreateModel(
            name="Execute_the_program",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=40)),
                ("path", models.URLField()),
            ],
            options={"db_table": "Execute_the_program", },
        ),
        migrations.CreateModel(
            name="experimental_result",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("tool_name", models.CharField(max_length=40)),
                ("testcase_name", models.CharField(max_length=40)),
                ("indicator_a", models.CharField(max_length=40)),
                ("indicator_p", models.CharField(max_length=40)),
                ("indicator_r", models.CharField(max_length=40)),
                ("indicator_f", models.CharField(max_length=40)),
            ],
            options={"db_table": "experimental_result", },
        ),
        migrations.CreateModel(
            name="eyi_result",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("models_name", models.CharField(max_length=40)),
                ("database_name", models.CharField(max_length=40)),
                ("average_a", models.CharField(max_length=40)),
                ("average_p", models.CharField(max_length=40)),
                ("average_r", models.CharField(max_length=40)),
                ("average_f", models.CharField(max_length=40)),
            ],
            options={"db_table": "eyi_result", },
        ),
        migrations.CreateModel(
            name="malicious",
            fields=[
                ("Mid", models.AutoField(primary_key=True, serialize=False)),
                ("Mname", models.CharField(max_length=200)),
                ("Mpath", models.CharField(max_length=200)),
            ],
            options={"db_table": "malicious", },
        ),
        migrations.CreateModel(
            name="Malicious_models_manage",
            fields=[
                (
                    "Malicious_model_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("Malicious_model_name", models.CharField(max_length=20, null=True)),
                (
                    "Malicious_model_grouping",
                    models.CharField(max_length=20, null=True),
                ),
                ("create_time", models.DateTimeField(auto_now_add=True, null=True)),
                ("is_Bidirectional", models.CharField(max_length=20, null=True)),
                ("is_feature", models.CharField(max_length=20, null=True)),
            ],
            options={"db_table": "Malicious_models_manage", },
        ),
        migrations.CreateModel(
            name="malicious_traffic11",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200)),
                ("path", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="model_info",
            fields=[
                ("model_id", models.AutoField(primary_key=True, serialize=False)),
                ("model_name", models.CharField(max_length=200)),
                ("model_info_url", models.URLField()),
                ("upload_date", models.DateTimeField(auto_now_add=True)),
            ],
            options={"db_table": "model_info", },
        ),
        migrations.CreateModel(
            name="ModelManagement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="模型名称"),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("CNN", "卷积神经网络"),
                            ("RNN", "循环神经网络"),
                            ("LSTM", "长短期记忆网络"),
                            ("TCN", "时间卷积网络"),
                            ("BiLSTM", "双向循环神经网络"),
                            ("BiTCN", "双向时间卷积网络"),
                            ("DMSE", "多堆叠集成模型"),
                            ("OTHER", "其他"),
                        ],
                        default="OTHER",
                        max_length=10,
                        verbose_name="模型类别",
                    ),
                ),
                (
                    "upload_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="上传时间"
                    ),
                ),
                (
                    "model_file",
                    models.FileField(upload_to="models/", verbose_name="模型文件"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="模型描述"),
                ),
            ],
            options={
                "verbose_name": "模型管理",
                "verbose_name_plural": "模型管理",
                "ordering": ["-upload_time"],
            },
        ),
        migrations.CreateModel(
            name="Models_manage",
            fields=[
                ("model_id", models.AutoField(primary_key=True, serialize=False)),
                ("model_name", models.CharField(max_length=20, null=True)),
                ("model_grouping", models.CharField(max_length=20, null=True)),
                ("create_time", models.DateTimeField(auto_now_add=True, null=True)),
                ("is_incremental_learning", models.CharField(max_length=20, null=True)),
                ("is_multiple", models.CharField(max_length=20, null=True)),
            ],
            options={"db_table": "models_info", },
        ),
        migrations.CreateModel(
            name="Test_dataset",
            fields=[
                ("test_id", models.AutoField(primary_key=True, serialize=False)),
                ("test_name", models.CharField(max_length=40)),
                ("test_path", models.URLField()),
                ("upload_date", models.DateTimeField(auto_now_add=True)),
            ],
            options={"db_table": "Test_dataset", },
        ),
        migrations.CreateModel(
            name="UserInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=11)),
                (
                    "sex",
                    models.CharField(
                        blank=True,
                        choices=[("F", "Female"), ("M", "Male")],
                        max_length=1,
                    ),
                ),
                ("birth", models.DateField(auto_now_add=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager()), ],
        ),
        migrations.CreateModel(
            name="DetectionHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "detection_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="检测时间"),
                ),
                (
                    "is_malicious",
                    models.BooleanField(default=False, verbose_name="是否恶意流量"),
                ),
                (
                    "accuracy",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="检测准确率",
                    ),
                ),
                (
                    "report",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="detection_reports/",
                        verbose_name="检测报告",
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="MTD.datasetmanagement",
                        verbose_name="检测数据集",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="MTD.modelmanagement",
                        verbose_name="检测模型",
                    ),
                ),
            ],
            options={
                "verbose_name": "检测历史",
                "verbose_name_plural": "检测历史记录",
                "ordering": ["-detection_time"],
            },
        ),
    ]
